// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract CharitableOrganization {
    address public charitableOrganizationAddress;
    uint public thresholdValue;
    mapping(address => uint) public balances;
    mapping(address => bool) public isAlerted;

    event AlertRaised(address indexed account, uint amount);

    constructor(uint _thresholdValue) {
        charitableOrganizationAddress = msg.sender;
        thresholdValue = _thresholdValue;
    }

    modifier onlyCharitableOrganization() {
        require(msg.sender == charitableOrganizationAddress, "Only charitable organization can call this function.");
        _;
    }

    function setThresholdValue(uint _thresholdValue) public onlyCharitableOrganization {
        thresholdValue = _thresholdValue;
    }

    function donate() public payable {
        balances[msg.sender] += msg.value;
        
        if (msg.value > thresholdValue) {
            emit AlertRaised(msg.sender, msg.value);
        }
        
        if (address(this).balance > 50 ether && !isAlerted[msg.sender]) {
            emit AlertRaised(msg.sender, balances[msg.sender]);
            isAlerted[msg.sender] = true;
        }
    }

    function withdraw(uint amount) public {
        require(balances[msg.sender] >= amount, "Insufficient balance.");

        balances[msg.sender] -= amount;
        payable(msg.sender).transfer(amount);
        
        if (address(this).balance > 50 ether && !isAlerted[msg.sender]) {
            emit AlertRaised(msg.sender, balances[msg.sender]);
            isAlerted[msg.sender] = true;
        }
    }
}
