// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract CharitableOrganization {
    address public charitableOrganizationAddress;
    uint public thresholdValue;
    
    struct Account {
        uint balance;
        bool isDonor;
        bool isAlerted;
    }
    
    mapping(address => Account) private userAccounts;

    event TransactionAlert(address indexed account, uint amount, string alertType);

    constructor(uint _thresholdValue) {
        charitableOrganizationAddress = msg.sender;
        thresholdValue = _thresholdValue;
    }

    modifier onlyCharitableOrganization() {
        require(msg.sender == charitableOrganizationAddress, "Only charitable organization can call this function.");
        _;
    }

    function setThresholdValue(uint _thresholdValue) public onlyCharitableOrganization {
        thresholdValue = _thresholdValue;
    }

    function donate() public payable {
        userAccounts[msg.sender].balance += msg.value;
        userAccounts[msg.sender].isDonor = true;

        if (msg.value > thresholdValue) {
            emit TransactionAlert(msg.sender, msg.value, "HugeTransaction");
        }

        if (address(this).balance > 50 ether && !userAccounts[msg.sender].isAlerted) {
            emit TransactionAlert(msg.sender, userAccounts[msg.sender].balance, "MoneyLaundering");
            userAccounts[msg.sender].isAlerted = true;
        }
    }

    function withdraw(uint amount) public {
        require(userAccounts[msg.sender].balance >= amount, "Insufficient balance.");

        userAccounts[msg.sender].balance -= amount;
        payable(msg.sender).transfer(amount);

        if (address(this).balance > 50 ether && !userAccounts[msg.sender].isAlerted) {
            emit TransactionAlert(msg.sender, userAccounts[msg.sender].balance, "MoneyLaundering");
            userAccounts[msg.sender].isAlerted = true;
        }
    }
}
